#!/usr/bin/env bash

__powerline() 
{

    # BLACK=1
    # RED=2
    # GREEN=3
    # YELLOW=4
    # BLUE=5
    # MAGENTA=6
    # CYAN=7
    # WHITE=8

    # BRIGHT_BLACK=9
    # BRIGHT_RED=10
    # BRIGHT_GREEN=11
    # BRIGHT_YELLOW=12
    # BRIGHT_BLUE=13
    # BRIGHT_MAGENTA=14
    # BRIGHT_CYAN=15
    # BRIGHT_WHITE=16


    git_info() 
    {
        local GIT_BRANCH_SYMBOL='Ч '
        local GIT_BRANCH_CHANGED_SYMBOL='+'
        local GIT_NEED_PUSH_SYMBOL='↑'
        local GIT_NEED_PULL_SYMBOL='↓'

        [ -x "$(which git)" ] || return    # git not found

        local git_eng="env LANG=C git"   # force git output in English to make our work easier
        # get current branch name or short SHA1 hash for detached head
        local branch="$($git_eng symbolic-ref --short HEAD 2>/dev/null || $git_eng describe --tags --always 2>/dev/null)"
        [ -n "$branch" ] || return  # git branch not found

        local marks

        # branch is modified?
        [ -n "$($git_eng status --porcelain)" ] && marks+="$GIT_BRANCH_CHANGED_SYMBOL"

        # how many commits local branch is ahead/behind of remote?
        local stat="$($git_eng status --porcelain --branch | grep '^##' | grep -o '\[.\+\]$')"
        local aheadN="$(echo $stat | grep -o 'ahead [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        local behindN="$(echo $stat | grep -o 'behind [[:digit:]]\+' | grep -o '[[:digit:]]\+')"
        [ -n "$aheadN" ] && marks+=" $GIT_NEED_PUSH_SYMBOL$aheadN"
        [ -n "$behindN" ] && marks+=" $GIT_NEED_PULL_SYMBOL$behindN"

        # print the git branch segment without a trailing newline
        printf " $GIT_BRANCH_SYMBOL$branch$marks "
		# printf "($branch$marks)"
    }

	# TODO:
	# __svn_info() {
	# }

    over_ssh() 
    {
        if [ -n "$SSH_CLIENT" ] || [ -n "$SSH_TTY" ]; then
            SESSION_TYPE="SSH "
            # many other tests omitted
        else
            case $(ps -o comm= -p $PPID) in
                sshd|*/sshd) SESSION_TYPE="SSH ";;
            esac
        fi

        printf "$SESSION_TYPE"
    }

    _fg () { echo "\[$(tput setaf $1)\]" ; }
    _bg () { echo "\[$(tput setab $1)\]" ; }


    ps1() 
    {
        # what OS?
        case "$(uname)" in
            Darwin)
                local PS_SYMBOL=''
                ;;
            Linux)
                local PS_SYMBOL=$'\u03bb'
                ;;
            *)
                local PS_SYMBOL=$'\u03bb'
        esac

        local DIM="\[$(tput dim)\]"
        local REVERSE="\[$(tput rev)\]"
        local RESET="\[$(tput sgr0)\]"
        local BOLD="\[$(tput bold)\]"

        # Check the exit code of the previous command and display different
        # colors in the prompt accordingly.
        if [ $? -eq 0 ]; then
            local BG_EXIT=""
        else
            local BG_EXIT="$(_bg 1)"
        fi

        PS1="$BG_EXIT$(_fg 3)[$RESET"
        PS1+="$BG_EXIT$(_fg 4)$(over_ssh)$RESET"
        PS1+="$BG_EXIT$(_fg 6)\w$RESET"
        PS1+="$BG_EXIT$(_fg 2)$(git_info)$RESET"
        # PS1+="$BG_EXIT$(_fg 10)$(__git_ps1 "(%s)" )$RESET"
        PS1+="$BG_EXIT$(_fg 3)]$RESET"
        PS1+="$BG_EXIT$(_fg 15)$PS_SYMBOL $RESET"
    }

PROMPT_COMMAND=ps1
}

__powerline
unset __powerline
